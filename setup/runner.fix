#!/bin/bash

set -e
sudo hostnamectl set-hostname master
 


# --- Install Dependencies ---

sudo apt update -y



# --- Kubernetes Cluster Setup ---

# Kubeadm initialization
if ! kubectl get pods -n kube-system 2>/dev/null | grep -q 'kube-apiserver'; then
    sudo kubeadm init --cri-socket=unix:///var/run/crio/crio.sock
    # Configure kubeconfig for ubuntu user
    sudo mkdir -p /home/ubuntu/.kube
    sudo cp /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
    sudo chown ubuntu:ubuntu /home/ubuntu/.kube/config
    # Install Weave Net CNI
    sudo -u ubuntu kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml
    # Wait until node is Ready
    echo "Waiting for node to become Ready..."
    until sudo -u ubuntu kubectl get nodes | grep -q ' Ready '; do
        sleep 5
    done
    # Remove control-plane taint
    sudo -u ubuntu kubectl taint node $(hostname) node-role.kubernetes.io/control-plane:NoSchedule- || true
    # Wait for kube-system pods
    echo "Waiting for kube-system pods to be Ready..."
    until sudo -u ubuntu kubectl get pods -n kube-system | grep -Ev 'STATUS|Running' | wc -l | grep -q '^0$'; do
        sleep 5
    done
    echo "Kubernetes control-plane setup complete."
else
    echo "[INFO] Kubernetes already initialized, skipping kubeadm init."
fi



# --- Metrics Server installation ---

if ! kubectl get deployment metrics-server -n kube-system &> /dev/null; then
    echo "[INFO] Installing Metrics Server..."
    kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
    kubectl -n kube-system patch deploy metrics-server \
        --type='json' \
        -p='[{"op": "add", "path": "/spec/template/spec/containers/0/args/-", "value":"--kubelet-insecure-tls"},
            {"op": "add", "path": "/spec/template/spec/containers/0/args/-", "value":"--kubelet-preferred-address-types=InternalIP"}]'
    # Wait for metrics-server to be ready
    sleep 7
    echo "Metrics Server installation complete."
else
    echo "[INFO] Metrics Server already installed, skipping."
fi



# --- Helm installation ---

if [ ! -f "/usr/local/bin/helm" ]; then
    echo "[INFO] Installing Helm..."
    curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
    echo "Helm installation complete."
else
    echo "[INFO] Helm already installed, skipping."
fi



# --- Install Prometheus and Grafana ---

if ! helm list -n monitoring | grep -q "prometheus"; then
    echo "[INFO] Installing kube-prometheus-stack (Prometheus + Grafana)..."

    if ! helm repo list | grep -q "prometheus-community"; then
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
    fi
    helm repo update

    kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -
    sleep 7

    helm install prometheus prometheus-community/kube-prometheus-stack -n monitoring
    kubectl patch svc prometheus-grafana -n monitoring -p '{"spec": {"type": "NodePort"}}'

    echo "kube-prometheus-stack installation complete."
else
    echo "[INFO] kube-prometheus-stack already installed in namespace monitoring, skipping."
fi



# --- Install Ingress NGINX Controller ---

if ! kubectl get deployment ingress-nginx-controller -n ingress-nginx &> /dev/null; then
    echo "[INFO] Installing Nginx Ingress Controller..."

    kubectl create namespace ingress-nginx --dry-run=client -o yaml | kubectl apply -f -
    sleep 7

    kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.13.1/deploy/static/provider/cloud/deploy.yaml
else
    echo "[INFO] Nginx Ingress Controller already installed, skipping."
fi